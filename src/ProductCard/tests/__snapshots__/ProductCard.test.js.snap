// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProductCard /> should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ProductCard
    brand="testBrand"
    image="testImage.jpg"
    name="testName"
    price={59.82}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(CardMedia)
          className="card-media"
          image="testImage.jpg"
          title="testName"
        />,
        <div
          className="card-content"
        >
          <div
            className="product-brand"
          >
            testBrand
          </div>
          <div>
            testName
          </div>
          <div
            className="product-price"
          >
            $59.82
          </div>
        </div>,
      ],
      "className": "product-card",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "className": "card-media",
          "image": "testImage.jpg",
          "title": "testName",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="product-brand"
            >
              testBrand
            </div>,
            <div>
              testName
            </div>,
            <div
              className="product-price"
            >
              $59.82
            </div>,
          ],
          "className": "card-content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "testBrand",
              "className": "product-brand",
            },
            "ref": null,
            "rendered": "testBrand",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "testName",
            },
            "ref": null,
            "rendered": "testName",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "$59.82",
              "className": "product-price",
            },
            "ref": null,
            "rendered": "$59.82",
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(CardMedia)
            className="card-media"
            image="testImage.jpg"
            title="testName"
          />,
          <div
            className="card-content"
          >
            <div
              className="product-brand"
            >
              testBrand
            </div>
            <div>
              testName
            </div>
            <div
              className="product-price"
            >
              $59.82
            </div>
          </div>,
        ],
        "className": "product-card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "card-media",
            "image": "testImage.jpg",
            "title": "testName",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="product-brand"
              >
                testBrand
              </div>,
              <div>
                testName
              </div>,
              <div
                className="product-price"
              >
                $59.82
              </div>,
            ],
            "className": "card-content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "testBrand",
                "className": "product-brand",
              },
              "ref": null,
              "rendered": "testBrand",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "testName",
              },
              "ref": null,
              "rendered": "testName",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "$59.82",
                "className": "product-price",
              },
              "ref": null,
              "rendered": "$59.82",
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
